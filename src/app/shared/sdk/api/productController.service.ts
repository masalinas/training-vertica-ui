/**
 * Spring Boot REST API
 * \"Spring Boot REST API for Pivotal Developer Training\"
 *
 * OpenAPI spec version: 1.0.0
 * Contact: miguel@thingtrack.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs' // correct Angular 6 error
//import { Observable }                                      from 'rxjs/Observable'; 

import { Product } from '../model/product';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProductControllerService {

    protected basePath = 'https://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a new product.
     * 
     * @param product product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProductUsingPOST(product: Product, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public createProductUsingPOST(product: Product, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public createProductUsingPOST(product: Product, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public createProductUsingPOST(product: Product, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling createProductUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // authentication (mykey) required
        if (this.configuration.apiKeys["api_key"]) {
            headers = headers.set('api_key', this.configuration.apiKeys["api_key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Product>(`${this.basePath}/api/products`,
            product,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a product by Id (Key, Version) from the system. 404 if the product&#39;s identifier is not found.
     * 
     * @param key key
     * @param version version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProductUsingDELETE(key: number, version: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProductUsingDELETE(key: number, version: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProductUsingDELETE(key: number, version: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProductUsingDELETE(key: number, version: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling deleteProductUsingDELETE.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling deleteProductUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // authentication (mykey) required
        if (this.configuration.apiKeys["api_key"]) {
            headers = headers.set('api_key', this.configuration.apiKeys["api_key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/api/products/${encodeURIComponent(String(key))}/${encodeURIComponent(String(version))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns list of all Pageable Products in the system.
     * 
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProductsUsingGET(page: string, size: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Product>>;
    public getAllProductsUsingGET(page: string, size: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Product>>>;
    public getAllProductsUsingGET(page: string, size: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Product>>>;
    public getAllProductsUsingGET(page: string, size: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getAllProductsUsingGET.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getAllProductsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (mykey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["api_key"]) {
            headers = headers.set('api_key', this.configuration.apiKeys["api_key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Product>>(`${this.basePath}/api/products`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns list of all Pageable Products in the system.
     * 
     * @param page page
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProductsUsingGET1(page: string, size: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Product>>;
    public getAllProductsUsingGET1(page: string, size: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Product>>>;
    public getAllProductsUsingGET1(page: string, size: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Product>>>;
    public getAllProductsUsingGET1(page: string, size: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getAllProductsUsingGET1.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getAllProductsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // authentication (mykey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["api_key"]) {
            headers = headers.set('api_key', this.configuration.apiKeys["api_key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Product>>(`${this.basePath}/api/products/pages/${encodeURIComponent(String(page))}/${encodeURIComponent(String(size))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a specific product by their Id (Key, Version). 404 if does not exist.
     * 
     * @param key key
     * @param version version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductByIdUsingGET(key: number, version: number, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public getProductByIdUsingGET(key: number, version: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public getProductByIdUsingGET(key: number, version: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public getProductByIdUsingGET(key: number, version: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getProductByIdUsingGET.');
        }
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getProductByIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // authentication (mykey) required
        if (this.configuration.apiKeys["api_key"]) {
            headers = headers.set('api_key', this.configuration.apiKeys["api_key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Product>(`${this.basePath}/api/products/${encodeURIComponent(String(key))}/${encodeURIComponent(String(version))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a product by Id (Key, Version) from the system. 404 if the product&#39;s identifier is not found.
     * 
     * @param productDetails productDetails
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductUsingPUT(productDetails: Product, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public updateProductUsingPUT(productDetails: Product, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public updateProductUsingPUT(productDetails: Product, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public updateProductUsingPUT(productDetails: Product, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (productDetails === null || productDetails === undefined) {
            throw new Error('Required parameter productDetails was null or undefined when calling updateProductUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // authentication (mykey) required
        if (this.configuration.apiKeys["api_key"]) {
            headers = headers.set('api_key', this.configuration.apiKeys["api_key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Product>(`${this.basePath}/api/products/${encodeURIComponent(String(productDetails.id.productKey))}/${encodeURIComponent(String(productDetails.id.productVersion))}`,
            productDetails,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
